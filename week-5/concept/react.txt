-----------Component-----------

Q - What is Component in React ?

Eveything in React is Component, whatever u see on the screen is a component, header section, or footer section, 
button, search bar, navbar..everything are component. (Components are the basic building blocks of react).

Q - How to create a component ?

Ex- create a Hello World component, and this component helps in writing Hello World in <h1> tag.

import React from "react";

function HelloWorld() {        --> this is component
    return <h1>Hello World</h1>;
}

In React, A component is simply a function that helps in performing a particular task.
In above example, HelloWorld component is helping us in writing Hello World inside <h1> tag.

Q - Rules for create a component ?

#Rule-1 : should return JSX. (means, it should return a HTML)

Example-1: (valid component) -> returning HTML

function HelloWorldComponent() {
    return <h3>Hello World</h3>;
}

Example-2: (not valid component) -> returning String

function HelloWorldComponent() {
    return 'Hello World';
}

#Rule-2 : Component name must start with Uppercase Letter

Example-1: (valid component) -> name : HelloWorldComponent

function HelloWorldComponent() {
    return <h3>Hello World</h3>;
}

Example-2: (not valid component) -> name : helloworldcomponent

function helloworldcomponent() {
    return 'Hello World';
}

NOTE : in case-2, it will not render the component.


-------------JSX (Javascript XML) - Advance/extended version of HTML---------------------

follow react documentation for JSX

-> some features of JSX
  
1. basic example
const element = <h1>Hello World</h1>;

2. embedding expression in JSX
const name = 'Rahul';
const element = <h1>Hello, {name}</h1>; 

output : Hello, Rahul

3. Javascript in JSX

funciton formateName(user) {
    return user.firstName + ' ' + user.lastName;
}

const user = {
    firstName: 'Rahul',
    lastName: 'Mahato'
};

const element = (
    <h1>
        Hello, {formateName(user)};
    </h1>
);

4. Dynamic Attributes

cont imageURL = "www.example.com/myPic.png";
const element = <img src={imageURL} />

or,

const linkToSite = "www.example.com";
const element = <a href={linkToSite}>Click Here</a>;

5. JSX expressions must have one parent element.

Example-1 : give error, because <h2>, <h1> & <h3> are different components.

function App() {
  return (
    <h2>Result : {add()}</h2>
    <h1>Hello World</h1>
    <h3>{link}</h3>
  );
}

Example-2: Correct, because <h2>, <h1> & <h3> are different components but having same parent element (i.e, <div>).

function App() {
  return (
    <div>
    <h2>Result : {add()}</h2>
    <h1>Hello World</h1>
    <h3>{link}</h3>
    <div>
  );
}


---------------Props---------------

Props are like parameters to a function.

Example-1 : Static output - Hello World

function MyHeading() {
    return <h1>Hello World</h1>;
}

Example-2 : Dynamic Output - output depends on the parameters

funciton MyHeading(props) {
    return <h1>{props.title}</h1>;
}


--during rendering (passing parameter)
<MyHeading title="This is dynamci heading content" />


---------------Hooks-----------------

1. useState Hook 

State : a state of a component is a variable that holds some information that may change over the lifetime of the component.
NOTE : States are local to it's component. (a state of a particular component will only update it's local component not others).

whenever the value of the state changes, the component re-renders itself with updated values. (React is very reactive, it re-render itself, that's why it's called React).



In React, a hook is a special function that allows you to use state and other React features in functional components. Hooks were introduced in React 16.8 to provide a way to use state and lifecycle features in functional components, which were previously only available in class components.


__________________________
The most common hooks are:

1. useState: Allows you to add state to functional components. It returns an array with two elements: 
             the current state value and a function that lets you update it.

Example :

import React, { useState } from 'react';

function ExampleComponent() {
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={() => setCount(count + 1)}>
        Click me
      </button>
    </div>
  );
}


2. useEffect Hook 

-lifecycle of a component

1. Contruction (Contruction of a component)
2. Mount (when component render on the screen)
3. Update (when we update the state of a component (re-rendering of component))
4. Un-Mount (when "component"(previous component) is removed from the screen after updation)

so, whenever we want to perform any kind of task or any function, when a component is movingn from one state to 
another state, for example a component is moving from it's constrcution state to it's Mount state and I want 
to peform a operation at Mount state then in such cases we will use "useEffect" Hook.

so, basically we will be using the useEffect hook in last 3 states of the component's lifecycle.
means when, 

1. moving from construction to Mount  --> (perfrom operation at Mount state)
2. moving from Mount to Update --> (perform operation at Update state)
3. moving from Update to Un-Mount --> (peform operation at Un-Mount state)

Exampe :- 

1. Moving from construction to Mount (At Mount State)

 
2. Moving from Mount to Update (At Update State)


3. Moving from Update to Un-Mount (At Un-Mount State)

