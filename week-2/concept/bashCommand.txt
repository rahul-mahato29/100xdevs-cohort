::Basic and Advance Bash Commands::

# terminal : it is nothing but another interface to do things or navigate on your machine.
# ctrl + c : this helps in terminating the running command or process.


--Basic Bash Commands--

Q- What is Bash ?

It is command line interpreater language, that help's in interacting with our operating system.

1. pwd -> print working directory
2. cd -> change directory
3. cd .. -> go back by one folder
4. ls - listing all the files of the current folder
5. mkdir - make directory / create directory
6. touch - create files inside a particular folder
7. rm (file_name) - to delete a file
8. rm -r (folder_name) - to delete a folder
_________________________________________________
Deleting with Confirmation:
If you want to be prompted for confirmation before deleting each file or folder, 
you can use the -i option with the rm command. For example:

rm -i example.txt       # For a file
rm -ri example_folder   # For a folder and its contents

After running these commands, you'll be prompted to confirm the deletion of each file or folder.
_________________________________________________

9. cat - print the content of a file
10. vi - VIM command (allow us to edit files)
11. mv - helps in moving a file or folder from one place to other.

syntax : mv (source) (destination)
Ex : $ mv a.txt newfolder
or,  $ mv file.txt documents/
or,  $ mv file.txt /path/to/destination/

12. mv old_fileName new_fileName -> Rename a file 
13. cp -> helps in copy a file or folder

syntax : cp (file/folder_name)  (folderName_toPaste)
Ex : $ cp a.txt newfolder

#case : circuits/test is a directory (not copied)
$ cp -r circuits/test contracts (now test will copied to contracts) - here we are coping recursively

14. npm (node package manager) ->  it helps in managing the external libraries that we use in our local machine.

syntax : npm install libraryName

for example : express, so to use express(which is an external library) in our local machine, we use "npm" command, which will help us in using the 
              express libraries, and this express library is register on NPM(NPM is a place where , people register there librabies which is written by them) 
              and we can use those librabies by using "npm" command to resolve/do our task.

15. node -> it give us a playground to run or test javascript code.
16. node a.js -> it helps to compile and run our javascript file locally.



--Advance Bash Commands--

Q - More about files and what are the different things that we can do with files.

-what is long format of files and directories ?

The "ls -l" command, is used to list files and directories in long fromat. The  long format provides
detailed information about each file and directory. 

Example :
-rw-r--r-- 1 user group 1234 Dec 20 10:30 myfile.txt
drwxr-xr-x 2 user group 4096 Dec 20 10:30 mydirectory

1.File Type and Permissions:

1.1 - The first character indicates the file type:

- : Regular file
d : Directory
l : Symbolic link
c : Character special file (e.g., devices)
b : Block special file (e.g., devices)
p : Named pipe (FIFO)
s : Socket

1.2 - The next nine characters represent the file permissions:

-> The three characters at the beginning indicate the owner's permissions.
-> The next three characters indicate the group's permissions.
-> The last three characters indicate others' (or world's) permissions.

1.3 - For each set of three characters (e.g., rwx), the meanings are:

r: Read permission
w: Write permission
x: Execute permission

2. Number of Hard Links:

The second column represents the number of hard links to the file or directory. 
Hard links are additional names (entries) pointing to the same inode on disk.

3. Owner:

The third column shows the username of the file or directory owner.

4. Group:

The fourth column shows the group associated with the file or directory.

5. File Size:

The fifth column represents the size of the file in bytes.

6. Modification Time:

The next three columns represent the date and time when the file or directory was last modified.

7. Name:

The last column shows the name of the file or directory.

Example :
Desktop/Assignment/100xdevs-cohort/week-1/assignment$ ls -l

-rwxrwxrwx 1 mahatorahul mahatorahul  758 Dec  4 09:13 README.md
drwxrwxrwx 1 mahatorahul mahatorahul 4096 Dec  4 09:13 easy
drwxrwxrwx 1 mahatorahul mahatorahul 4096 Dec  4 09:13 hard
drwxrwxrwx 1 mahatorahul mahatorahul 4096 Dec  4 09:13 medium

And,
Desktop/Assignment/100xdevs-cohort/week-1/assignment/easy$ ls -l

-rwxrwxrwx 1 mahatorahul mahatorahul 305 Dec  4 09:13 anagram.js
-rwxrwxrwx 1 mahatorahul mahatorahul 525 Dec  4 09:13 expenditure-analysis.js
-rwxrwxrwx 1 mahatorahul mahatorahul 250 Dec  4 09:13 findLargestElement.js

Q - How to modify the (read, write & execute)permission for a file or a folder ?

file permissions determine who can perform certain actions (read, write, execute) on a file or directory
The "chmod" command is used to change these permissions,

syntax : chmod permissions fileName 

There are two ways through which we can set the permission of a file or folder

1. Symbolic Representation : Through using (r-read, w-write, x-execute) chracter method.

User Classes:

u: User/Owner
g: Group
o: Others
a: All (equivalent to ugo)

Operations:

+: Add permissions
-: Remove permissions
=: Set permissions explicitly

Permission Types:

r: Read
w: Write
x: Execute

Examples: Symbolic Representation:

# To add execute permission for the owner of a file:
$ chmod u+x filename  

# To remove write and execute permissions for others:
$ chmod o-wx filename

To set read and write permissions for the owner and the group, and remove all permissions for others:
$ chmod ug=rw,o= filename


2. Octal Representation : Through using (4-read, 2-write, 1-execute) numeric method.

In octal representation, each permission type is represented by a number:

4: Read
2: Write
1: Execute

For example, to set read and write permissions for the owner and remove all permissions for others:
$ chmod 600 filename

To grant read, write, and execute permissions for the owner, read and execute permissions for the group, and no permissions for others:
$ chmod 750 filename


--Some List Commands--

1. ls - list all the files of current directory
_________________________________________________
1.1 ls newDir     -> to check all the files/folders inside newDir directory
1.2 ls -l         -> to check the details about all the files(it's size, owner/author, last modified date, file type(either a file or folder))
1.3 ls -R newDir  -> to check all the subDirectories of all the directories that newDir directory containing
1.4 ls -t         -> display a list of files and directories in the current directory, sorted by modification time, with the newest ones at the top
1.5 ls -lt        -> shows detailed information about each file, including modification time, and the files are sorted with the newest(last modified) at the top
1.6 ls -lr        -> shows detailed information about each file, including modification time, and the files are sorted reversly with the oldest(modified) at the top
1.7 ls -la        -> to check all the files(including all the hidden files also) & the files name which are proceded by dot(.) are the hidden file
1.8 ls -s         -> list the files in the current directory along with their allocated sizes in blocks
1.9 ls -lR | grep .json -> list files recursively in a directory and its subdirectories (ls -lR) and then filter the output to show only the lines containing the string ".json"
1.10 ls *.js      -> list all files in the current directory that have a ".js" extension.
1.11 ls zoom*     -> list files and directories in the current directory that start with the characters "zoom".
1.12 ls ..        -> list the contents(files and folder) of the parent directory (one level up) from the current directory

NOTE : we can use multiple combination of commands and can check the files according to our requirement.
Example : ls -lRa newdir/snake_game
_________________________________________________


2. cat - print/view the content of a file

2.1 cat > newfile.txt  -> can add content in file named newfile.
2.2 cat >> newfile.txt -> can append content in the file named newfile with the content which is already present in the file.

3. mkdir test && cd test   -> it will create a directory test and also navigate to test from it's previous directory.
4. mkdir -p newDesk/script -> creating a directory(script) inside newDesk recursively(means without navigating inside the newDesk directory we can create the a new directory inside it)
5. echo "message" -> to display any message

Ex :  echo $PATH -> to look the current path

Look something like,
$ Desktop/Assignment$ echo $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/lib/wsl/lib:/mnt/c/Program Files
/Common Files/Oracle/Java/javapath:/mnt/c/MinGW/bin:/mnt/c/Program Files/nodejs/:/mnt/c/Users/815ra/AppData/Roaming/Python
/Python311/Scripts:/mnt/c/Users/815ra/AppData/Local/Programs/Microsoft VS Code/bin:/mnt/c/Users/815ra/AppData/Roaming/npm:/mnt
/c/Users/815ra/AppData/Local/Programs/Hyper/resources/bin:/snap/bin

# working with the content of the file :

6. head fileName -> return the first 10 lines/rows of the specified file.
7. tail fileName -> return the last 10 lines/rows of the specified file.

8. head -20 fileName -> return 20 lines from the top of the specified file.
9. tail -20 fileName -> return 20 lines from the end of the specified file.

# want to view the content somewhere from the middle

10. ( | -> pipe operator)

Example : $ head -n 29 filename | tail -n 5

Explanation:

1. head -n 29 filename : This part of the command extracts the first 29 lines of the file.

2. | : This is the pipe operator, which takes the output of the command on its left and uses it as input for the command on its right.

3. tail -n 5: This part of the command takes the last 5 lines from the output of the head command.

Q - want to view the content of the file from lineNumber 25 to lineNumber 29

Ans -> $ head -n +25 fileName | head -n 5

The command head -n +25 fileName | head -n 5 is used to display lines from a file, starting from line 25 
and showing the next 5 lines. Here's a breakdown of how this command works:

1. head -n +25 fileName : This part of the command extracts lines starting from line 25 to the end of the file.
2. | : This is the pipe operator, which takes the output of the command on its left and uses it as input for the command on its right.
3. head -n 5: This part of the command takes the first 5 lines from the output of the previous head command.

So, the overall effect is that it displays lines 25 to 29 from the file.


11. wc fileName -> return numberOfLines, numberOfWords, numberOfCharacters containing the content of the specified file.

Ex: 50    68    330  newFile.txt (50-lines 68-words 330-characters)

12. Search of a particular occurance of words within a file.

Ex: grep "one" newfile.txt -> return all the words having "one" in it.
And,
    grep "one" newfile.txt | wc -> return numberOfLines, numberOfWords, numberOfCharacters from all line where "one" word is used.
And,
    grep "one" newfile.txt | wx -l -> return only the number of words which is containing "one" in it.

OR,
13. grep -c "one" newfile.txt -> return number of count of "one" word in newfile.txt file.
14. grep -h "one" newfiel.txt -> return all the lines where word "one" is present in newfile.txt
15. grep -hi "one" newfile.txt -> searches for the pattern "one" (case-insensitive, means can be in capital or small) 
                                  in the file newfile.txt and prints the lines that contain the specified pattern.
output : one
         One
         ONe 
         ONE 

16. grep -hin "one" newfile.txt -> return as above output but with the line number also.

output :1:one
        2:One
        3:ONe 
        4:ONE

17. grep -hinw "one" newfile.txt ->  used to search for the exact word "one" in a case-insensitive manner within files.

-> Here's a breakdown of the options:

-h : Suppresses the display of filenames in the output.
-i : Performs a case-insensitive search.
-n : Displays the line numbers along with the lines that match the pattern.
-w : Matches only whole words. It ensures that "one" is not part of a larger word.                                

18. grep -o "one" newfile.txt -> used to show only the part of a line that matches the specified pattern.
19. grep -w "one" newfile.txt -> used to search for the exact word "one" in a file or input stream. 
                                 The -w option ensures that the pattern is matched only as a whole word 
                                 and not as part of a larger word.

20. history 0 -> to view all the command that we executed in the terminal previously.

Q - Bash Script ??

Putting a bash command into a script involves taking one or more commands that you  would normally exexute 
in the bash shell and placing them into a file with a ".sh" extension or another suitable script extension. 
The file becomes a Bash script, and it can be executed as a single unit, automating the execution of those
commands.

Example :

1. create a script 

open a text editor (like 'nano', 'vim', or 'gedit') and create a file named "myscript.sh".
first create the file of .sh extension and then open it in VIM and then follow the steps mentioned below.

2. write bash commands in the script

Add the follwing content to the script file:

#!/bin/bash          
echo "hello, world!"
mkdir auomated_dir
cd automated_dir && touch newScript_file.txt

The above script consist of 3 lines, the first line 
(#!/bin/bash) is called a shebang and specifies the path 
to the interpreter (in this case, Bash) that we like to use 
to parse our script.

3. save and exit 

save the file and exit the text editor

4. Then execute it

syntax : $ bash scriptFileName.sh

NOTE: In case it is not executing then, need to make the script file as executable file
      and for that,

      4.1 - use "chmod" command to make the script executable
      ex : chmod +x myscript.sh
      4.2 - Execute the script by running
      ex : ./myscript.sh
This will run the commands within the script, and you should see the output on your terminal.

----------------------------------------------------------------------
Example : $ cat log.txt

output : Timestamp       Category    Message
         1598843202      INFO        Botting up System
         1598843402      ERROR       User annonymous attempt to access
         1598843502      INFO        System booted succcessfully
         1598853502      INFO        System health checkup
         1598863888      INFO        User admin requested
         1598863891      ERROR       Request resource not found
-----------------------------------------------------------------------

21. grep "ERROR" log.txt -> return only ERROR category messages
22. grep -v "INFO" log.txt -> to get all the details apart from "INFO" messages

23. grep -B 5 ERROR log.txt ->  used to search for the string "ERROR" in the file log.txt 
                                and display the matching lines along with the 5 lines before 
                                each match (5 lines of leading context). The -B option stands 
                                for "before."

23. grep -C 5 ERROR log.txt ->  used to search for the string "ERROR" in the file log.txt and 
                                display the matching lines along with the 5 lines before and 
                                after each match (5 lines of context both before and after each match). 
                                The -C option stands for "context".


Q - sed SCRIPT FILE ?

The sed command is used for text manipulation in Linux environments. 
It is particularly powerful for performing search-and-replace operations, 
as well as other text transformation.

syntax : sed 'SCRIPT' FileName

here SCRIPT represents the series of sed commands you want to apply,
and the SCRIPT can include various sed commands separated by semicolons.

Example :  file named example.txt with the following content:
           Hello, world!
           This is an example.
Now, Now, you want to replace "Hello" with "Hi" and "example" with "sample.

$ sed 's/Hello/Hi/; s/example/sample/' example.txt

output : Hi, world!
         This is an sample.

NOTE:
The sed's substitute command has the following structure:
's/pattern/replacement/'

24. sed 's/ERROR/CRITICAL' log.txt -> replacing ERROR with CRITICAL

25. sed -ibackup 's/ERROR/CRITICAL' log.txt -> create a log.txt backup file for us, so that we can experiment 
                                              on the original file and the new file that is created will be saved as it is.

26. sed '3 s/ERROR/CRITICAL' log.txt -> here 3 specifing the lineNumber so the changes will only reflect on linenumber 3.

27. sed '3,5 s/ERROR/CRITICAL' log.txt -> 3,5 means line number 3 to 5, so replace ERROR with CRITICAL from linenumber 3 to 5.

28. sed -n '3,/ERROR/ p' log.txt -> command uses the sed stream editor to print lines starting from the third line up to and including the line containing the pattern "ERROR" in the file log.txt.

Q - awk Script file

awk command is a powerful text-processing tool in Unix and Linux systems. It's often used for pattern scanning and processing.
 An awk script consists of a series of patterns and actions. Here's the basic syntax:

syntax : awk 'pattern { action }' file
here,
pattern: Specifies a pattern to match lines.
{ action }: Specifies an action to be performed on lines that match the pattern.


Example : file named example.txt with the following content:
          John 25
          Alice 30
          Bob 22
Now, want to print the names of people who are 25 years old or older. You can create an awk script for this:

$ awk '$2 >= 25 { print $1 }' example.txt

output : John
         Alice

Explanation:

1. $2: Represents the second field in each line (the age in this case).
2. $2 >= 25: This is the pattern, which checks if the age is greater than or equal to 25.
3. { print $1 }: This is the action, which prints the first field (the name) of lines that match the pattern.


29. awk '/CRITICAL/{print $0}' log.txt

30. awk '{gsub(/CRITICAL/, "ERROR")}{print}' log.txt

31. awk 'BEGIN {print "LOG SUMMARY\n----------"} {print} END {print "-------------\END OF LOG SUMMARY"}' log.txt

32. awk '{print $1, $2}' log.txt -> only print the 1st and 2nd column data from log.txt file

33. awk -F "," '{print $1, $2}' log.txt

34. awk '{count[$2]++} END {print count["ERROR"]}' log.txt -> count the number of time ERROR occured in the 2nd column (arithmatic opertion on file)

35. awk '{if ($1 > 159886388 ) {print $0} }' log.txt -> checking condition and on the basis of condition it will print the result (conditional operation on file)









______________________________________________________________________________________
IMP - cd /mnt

# mahatorahul@LAPTOP :/mnt/c/Users/815ra/OneDrive/Desktop
______________________________________________________________________________________