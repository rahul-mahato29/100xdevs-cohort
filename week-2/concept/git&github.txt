::GIT AND GITHUB::

                             ----Commands----
 
1. git clone <repo link> -> cloning/coping a repository from github to our local machine.
2. git status -> display the state of our code.
                 **generaly has 4 types of status**
                   1. untracked  - new files that git doesn't yet track
                   2. modified   - changed that we have done but not updated in the main folder(means on github)
                   3. staged     - file is ready to be commited (means after add)
                   4. unmodified - unchanged file.

3. git add <file name> ->add new or changed files in your working directory to the git staging area.
4. git add .           -> add all the changes in one go (we use this, when we have done lot of changes and want to commit all in the main file).
5. git commit -m <"some message"> -> it is the record of all changes.
                    **till now you will not see any changes on the github(means addition of any file)**
                    **and it will show ("Your branch is ahead of 'origin/main' by 1 commit") -
                      means our local repo having one extra file which is not there in my original repo(on github), 
                      so to add this changes in the original repo(on github) - will push our changes to the original file**

6. git restore --staged <file>  -> to unstage a particular file that you have been commited.

7. git push origin main -> upload local repo content to remote repo.

8. git remote -v        -> is used to view the list of remote(Github) repositories associated with your Git repository and their corresponding URLs.

NOTE : And in case, we don't have any remote repositories associated with out Git then we can configer the remote repository(means GitHub)
       with out local (Git) repository, so that whenever we do any changes in the local repositories then using PUSH command we can reflect 
       it back to the remote repo. So to configer which the remote repository, we use below command.

9. git remote add origin <link of github repo> -> is used to associate a remote repository with your local Git repository.


10. git commit -am       -> add and commit both using this command, but it will only work in case of "modified file", means only modified file will get
                            added and commited in one go using this command.

11. ls -a               -> to see the (normal file + hidden file) in a folder, basically means it will display all the files.

12. git branch -> return all the branches which is associate with the project on which we are working.

Ex : $ git branch
     * add_feature  (this astric symbol - indicate the current branch on which we are working)
       main

13. git checkout -b <branch_name> -> to create a new branch (for adding feature or fixing any bugs)

ex: git checkout -b feature_update_file

14. git checkout <branch_name> -> to navigate from one branch to another branch

15. git diff <branc_name> -> compare the different branches and return it's difference .

16. git push -u origin <branch_name> -> to push the changes on the feature branch to the remote machine(gitgub)

ex: git push -u origin add_feature 

NOTE : It is recommanded to delete the branch which is no longer to use, for example add_feature branch.

17. git branch -d <branch_name>  -> to delete the branch, which is no longer to use.

18. git merge <branch_name> -> to merge the changes into the main branch.

--Git Commands to resolve conflicts--

19. git log --merge  : produce the list of commits that are causing the conflict.

20. git diff : Identify the difference between the states repositories or files. 

21. git checkout : Used to undo the changes made to the file, or for changing branches.

22. git reset --mixed : Used to undo changes to the working directory and staging area.

23. git merge --abort : Help in exiting the merge process and returning back to the state before the merging began.

24. git reset : Used at the time of merge conflict to reset the conflicted files to their original state.


EXAMPLE - merging conflit example

Error:
Auto-merging index.html
CONFLICT (context): Merge conflict in index.html
Automatic merge falied: fix conflicts and then commit the result.

so, to resolve the above error, from the information we got the idea that , there are few changes inside the index.html file
which is not present in our branch , so we do it manually. (check in vim and observe the changes and make the changes).

then check,
$ git diff main   - after improting the all the changes in our own branch, it will no show any difference. Because now both the 
                    files are same (index.html)

$ git commit -am "Resolved merge conflict"

$ git merge main

$ git push origin hotfix.


___________IMP___________
Q- If you've successfully merged your feature branch into the main branch on the remote repository (GitHub), but the changes are 
   not yet reflected in your local main branch in VSCode, you may need to perform a few additional steps to update your local 
   repository. 

Example : for example a new folder added into the main project then to bring that new added folder into your local repo, follow 
          the below steps. 
   
Here's what you can do:

1. Fetch the Changes: Open Git Bash or the terminal in VSCode, and navigate to your local repository's root directory.
   Run the following command to fetch the latest changes from the remote repository:

$ git fetch origin
This command fetches the changes from the remote repository but doesn't automatically merge them into your local branches.

2. Checkout the Main Branch: Ensure you are on the main branch:

$ git checkout main
This switches your working directory to the main branch.

3. Merge the Changes: Merge the changes from the remote main branch into your local main branch:

$ git merge origin/main (exact : git merge origin)
This command merges the changes fetched from the remote main branch into your local main branch.

4. Resolve Conflicts (if any): If there are merge conflicts, Git will notify you. Open the conflicted files, resolve the conflicts, 
   and then complete the merge by running:

$ git merge --continue
If you are unsure about resolving conflicts, you can also use git mergetool or manually edit the conflicting files.

5. Push the Changes: Finally, push the merged changes to the remote repository:

$ git push origin main
This updates the main branch on the remote repository with your local changes.

Now, your local main branch should be updated with the changes from the remote main branch. You may need to refresh your VSCode or 
open the files to see the changes reflected in your editor.


---another solution (chatGPT) will discuss later--


-------------------------------------------------------------------------------------------------------------------------------------------------
                                --VIM Command--

1.  vi <file_name>  (ex:  vi README.md) - help in doing the changes itself inside the git bash terminal, by opening the VIM terminal

Imp Commands to operate the VIM terminal,

1.Entering Insert Mode:

     Press "i" to enter insert mode. You will see -- INSERT -- at the bottom of the terminal, indicating that you are in insert mode.

2.Making Changes:

     Navigate to the location in the file where you want to make changes using the arrow keys or other movement keys.
     Make the necessary changes.

3.Exiting Insert Mode:

     To exit insert mode and return to normal mode, press the "Esc key". The -- INSERT -- message at the bottom should disappear.

4.Saving Changes:

     To save changes, while in normal mode, type ":w" and press Enter. This writes (saves) the changes to the file.

5.Exiting Vim:

     To exit Vim, while in normal mode, type ":q" and press Enter or in some case it is ":q!" and press Enter.
    



# remote - means talking about github
# local - means talking about out system

----------------------------------------------------------------------------------------------------------------------------------------------------

                                                  ----Git and Github----

Git - free and open source version control system

Q- What is version control system ?

- A system that is use to keep tracks of version's of our project
- In simple words, a system that keeps track of our files or projects.
- It allows you  to revert selected files to a previous state, revert the entire project to a previous state, 
  compare changes over time, see who last modified something so that  we can know what might be causing a problem,
  or what is the issue, who made it, and when with the details.

Q- Two types of version control system ?
   
   1. Centralized Version control (ex: subversion and team foundation server)
   2. Distributed Version control (ex: git and mercurial)

Q- Why Git ?

- free
- open source
- scalable (don't need any active server to use it)
- super fast
- cheap branching and merging

Q- What is GitHub ?

-GitHub is a web-based hosting service for git repositories.
-You can use git without Github, but you cannot use github without git.

Q- Difference between Git and Github ?

Git

-Used for version control
-Installed locally on computer
-Tracks changes made to a file

GitHub

-Used for hosting git repositories
-Cloud based
-provides a web interface to view file changes 

Q- Some Terminology
                      
-Local repository
Every VCS(version control system) tool provides a private workplace as a working copy. Developer make changes in their private 
workplace and after commit, these changes become a part of the repository. Git takes it one step futher by providing them 
a private copy fo the whole repository. Users can perfrom many operations with this repository such as add file, remove file, 
rename file, move file, commit changes, and many more. And after commit, these changes become the part of the main repository.

-Working Directory and Staging Area or Index
An intermediate area where commits can be formatted and reviewed before completing the commit.

-Push 
Send a change to another repository(may require permission)

-pull
grab a change from a repository

Q - Basic workflow of Git

Step-1 - You modify a file from the working directory
Step-2 - You add these files to the staging area.
Step-3 - You perform a commit operation that moves the files from the staging area. After push operation, 
         it stores the changes permanently to the Git repository.

Q- Blobs (Binary Large Object)

Blobs stands for Binary Large Object. Each version of a file is represented by a blob. A blob holds the file related data (it’s version and all) 
but doesn’t contain any metadata, (means information stored inside the file) about the file. It is a binary file, and in the Git database, 
it is named as the SHA1 hash of that file. In Git, files are not addressed by names internally. Everything is content-addressed, 
meaning it is addressed by a SHA1 hash or unique identifier.

Trees

Trees is an object, which represents a directory. It holds blobs as well as other sub-directories. Basically it is used to maintain association 
and relationship between directories and sub-directories.

Commits

Commit holds the current state of the repository. A commit is also named by SHA1 hash.
Commit object (think like a node of the linked list)
Every commit object has a pointer to the parent commit object.
From a given commit, you  can traverse back by looking at the parent pointer to view the history of the commit.
If a commit has multiple parent commits, then that particular commit has been created by merging two branches.

Git Commands

Clone : Bring a repository hosted somewhere like Github into your local machine.
Add : add new or changed files in your working directory to the git staging area 
Commit : give us the option to save your files changes in git, so that we can eventually push them or upload all of these to a git repo like GitHub.
Push : Upload your commit to a git repo, like GitHub.
Pull : Download changes from a remote repository to your local repository.


--Git WorkFlow--

1. Local Git Workflow (when we work on our own project)

   
                git add                        git commit                      git push
(write code)    ----->   (Stages code changes)    ----->    (Commit Changes)    ----->    (Push Changes to remote machine)


2. Git Workflow (when we work on real project)


                git add                        git commit                      pull request                                         git push
(write code)    ----->   (Stages code changes)    ----->    (Commit Changes)    ----->      (code review by the project member)      ----->     (push changes to remote machine)


NOTE : In case of Real Project, generally we don’t have the access to push the changes directly in the main branch, 
       so therefore we raise the pull request and once our changes get reviewed then reviewer push our changes in the main branch.



---Git Branching--

1. Master Branch - It is the default branch or the main branch, where we will adding changes or features and resolving buggs to make it more better,
                   then it's previous version.

2. feature Branch - it's a copy of current main branch where we do add and test some features on which we were working. And after adding the changes it is 
                    working fine then we merge it in the main(master) branch.
                                     
3. Hotfix Branch - When we find any buggs inside the main branch, then we make a copy of the main brach called hotfix branch to fix the bug and apply some
                   changes and test it , once bug get fixed then we add the changes inside the master branch.

Q- What is Git Merge Conflcit ?

If we have created a feature branch and added some feature in it, and want to add this feature in the main branch then to add this, we merge the feature branch into the main 
branch, but mostly this process is not smooth, because If you are working on the real project then every time some team or developer will be there who is working on some features or resolving
some bugs, so for example - the time you made the feature branch and the time you want to merge the feature branch into the main branch..then there is a posibilty that between this time 
someone had added or done some changes in the main branch, and because the changes is not there in the feature branch , which one get added after we created the feature branch..so therefore 
it will not get merge and raise a merge conflit.

There are 2 types of merge conflicts 

1. While starting the merge process
2. During the merge process

_________________________________________

Q- what is ""GitFlow" branching strategy ?


Gitflow is a popular branching strategy that provides a structured and organized approach to managing branches 
in a Git repository. It was introduced by "Vincent Driessen" and is widely used in software development workflows. 
The Gitflow model defines specific branches and their purposes, making it easier to manage feature development, 
releases, and hotfixes. Here are the main branches in the Gitflow branching strategy:

1. Master Branch:

- The master branch represents the stable and production-ready state of the project.
- Only code that has been thoroughly tested and is ready for release should be merged into master.

2. Develop Branch:

- The develop branch is where ongoing development and integration of feature branches take place.
- Feature branches are merged into develop when they are completed and tested.

3. Feature Branches:

- Feature branches are created for the development of specific features or enhancements.
- They branch off from the develop branch and are merged back into develop once the feature is complete.
- Naming convention for feature branches: feature/{feature-name}.

4. Release Branches:

- Release branches are created when the development on the develop branch is ready for a new release.
- They allow for stabilization, bug fixes, and preparing for the release.
- Once the release is ready, the changes are merged into both master and develop.
- Naming convention for release branches: release/{version-number}.

5. Hotfix Branches:

- Hotfix branches are used to quickly address critical issues or bugs in the production code.
- They branch off from the master branch, and once the hotfix is complete, changes are merged into both master and develop.
- Naming convention for hotfix branches: hotfix/{issue-number}.


# The typical flow in Gitflow is as follows:

- New features are developed in feature branches branched off from develop.
- When a feature is complete, it is merged back into develop.
- When a release is planned, a release branch is created from develop.
- After testing and bug fixes, the release branch is merged into both master and develop.
- If a critical issue is discovered in the master branch, a hotfix branch is created to address it.
- The hotfix branch is merged back into both master and develop.


This branching strategy helps in maintaining a clear separation between ongoing development, stable releases, and hotfixes. 
It promotes a systematic and organized workflow for development teams. Gitflow is implemented using Git commands and can also 
be facilitated by tools like git-flow, which provides a set of high-level commands for managing the Gitflow workflow.


_______________________
Working on real projects involves more than just understanding branching strategies. 
Here are some additional tips and best practices that can be helpful in real-world Git workflows:

1.Commit Messages:

Write clear and concise commit messages that convey the purpose of the change.
Use the imperative mood (e.g., "Add feature" instead of "Added feature").

2.Atomic Commits:

Make each commit a self-contained and atomic unit of change, addressing a specific issue or task.
Avoid combining unrelated changes in a single commit.

3.Pull Frequently:

Regularly pull changes from the remote repository to stay up-to-date with the latest codebase.
This helps in identifying and resolving conflicts early.

4.Code Reviews:

Engage in code reviews to ensure code quality, catch issues, and share knowledge within the team.
Use pull requests or merge requests for structured code reviews.

5.Continuous Integration (CI):

Integrate Git with CI/CD pipelines to automate testing and deployment processes.
Ensure that code is tested before it gets merged into shared branches.

6.Branch Protection:

Protect important branches (e.g., master and develop) to prevent direct pushes and enforce code reviews.
This ensures that changes go through the proper review process.

7.Git Hooks:

Utilize Git hooks for automating tasks before or after certain Git events (e.g., pre-commit, post-merge).
Hooks can be used for code formatting, linting, or running tests.

8.Version Tagging:

Tag releases with version numbers to mark significant points in your project's history.
This facilitates easy identification of releases in the Git history.

9.Documentation:

Maintain clear and up-to-date documentation for your project.
Include information about the project structure, setup instructions, and any specific Git workflows your team follows.

10.Collaboration Tools:

Use collaboration tools integrated with Git, such as GitHub, GitLab, or Bitbucket, to enhance project visibility and collaboration.

11.Git Aliases:

Create Git aliases for commonly used commands to increase efficiency.
For example, you can create aliases for complex commands or common workflows.

14.Branch Cleanup:

Periodically clean up branches that are no longer needed.
Remove feature branches after they have been merged and are no longer in use.

15.Monitoring:

Keep an eye on the Git repository for any unusual activities, especially in shared branches.
Monitor for new issues, comments, and pull requests.

16.Communication:

Foster good communication within the team. Discuss major changes, branching strategies, and any issues that may impact collaboration.

17.Gitignore:

Use a .gitignore file to specify which files or directories should be ignored by Git (e.g., build artifacts, temporary files).
By incorporating these practices into your Git workflow, you can contribute to a more efficient and collaborative development process in real-world projects. 
Adapt these tips based on your team's specific needs and project requirements.